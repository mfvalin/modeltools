#!/bin/bash
MyName=$(readlink -e ${0})
export VERSION=${MyName##*_}
echo "INFO: VERSION=${VERSION}"
usage() {
cat <<EOT
  usage: ${0##*/} -t n_seconds -cpus n_cpus -nodesize n_cores [-queue q_name] -name job_name [-submit] -cfg config_file -- [arguments for ord_soumet]
EOT
exit 0
}
fatal() {
  echo "missing mandatory argument -${1}, ABORTING"
  usage
  exit 1
}
[[ "$1" == -h || "$1" == --help ]] && usage
#
# process arguments
#
walltime=""
cpus=""
nodesize=""
QuEuE=""
ConfigFile=""
jobname=""
SuBmIt=""
while [[ -n "$1" ]] ; do
  [[ "$1" == -t ]]        && walltime="$2"   && shift && shift && continue
  [[ "$1" == -cpus ]]     && cpus="$2"       && shift && shift && continue
  [[ "$1" == -nodesize ]] && nodesize="$2"   && shift && shift && continue
  [[ "$1" == -queue ]]    && QuEuE="$2"      && shift && shift && continue
  [[ "$1" == -cfg ]]      && ConfigFile="$2" && shift && shift && continue
  [[ "$1" == -name ]]     && jobname="$2"    && shift && shift && continue
  [[ "$1" == -submit ]]   && SuBmIt="YES"             && shift && continue
  [[ "$1" == -- ]]                                    && shift && break
  echo "FATAL: invalid argument '$1', ABORTING" && exit 1
done
[[ -z ${ConfigFile} ]] && fatal cfg
[[ -z ${walltime} ]]   && fatal wall
[[ -z ${cpus} ]]       && fatal cpus
[[ -z ${jobname} ]]    && fatal name
[[ -z ${nodesize} ]]   && fatal nodesize
[[ -n ${QuEuE} ]]      && QuEuE="-q ${QuEuE}"
#
unset QUEUE_1CPU
unset QUEUE_2CPU
unset QUEUE_3CPU
unset QUEUE_4CPU
#
export ContainerJob=${TMPDIR}/ContainerJob_$$
#
# try using which to locate run_work_stream_${VERSION} and pick_and_run_work_${VERSION}
# if nothing is found, try from my own directory
export RunWorkStream=$(readlink -e $(which run_work_stream_${VERSION}) 2>/dev/null)
[[ -z ${RunWorkStream} ]] && RunWorkStream=${MyName%/*}/run_work_stream_${VERSION}
if [[ -z ${RunWorkStream} ]] ; then
  echo "FATAL: run_work_stream_${VERSION} not found, ABORTING"
  exit 1
fi
export PickAndRunWork=$(readlink -e $(which pick_and_run_work_${VERSION}) 2>/dev/null)
[[ -z ${PickAndRunWork} ]] && PickAndRunWork=${MyName%/*}/pick_and_run_work_${VERSION}
if [[ -z ${PickAndRunWork} ]] ; then
  echo "FATAL: pick_and_run_work_${VERSION} not found, ABORTING"
  exit 1
fi
#
if [[ -r ${ConfigFile} ]] ; then
  cat ${ConfigFile} >${ContainerJob}.user
else
  echo "FATAL: cannot read configuration file '${ConfigFile}', ABORTING"
  exit 1
fi
#
cat <<EOJ >${ContainerJob}
export RunWorkStream=${RunWorkStream}
export PickAndRunWork=${PickAndRunWork}
export walltime=${walltime}
export nodesize=${nodesize}
export TheJobName=${jobname}
EOJ
#
cat <<\EOJ >>${ContainerJob}
#
# get list of processes for which a taskset will have to be applied
#
export MyProcesses=""
for i in $(pgrep -u $USER) ; do 
  kill -s 0 $i && MyProcesses="$MyProcesses $i"
done
echo "=== MY PROCESSES : $MyProcesses ==="
echo "=== NODE FILE ==="
cat $PBS_NODEFILE
export SAVE_HOSTFILE=$PBS_NODEFILE
export NODEFILE_PBS=${PBS_NODEFILE}
export RANKFILE_PBS
export RESOURCES_PBS
#
# arguments    noderange:cpurange ... noderange:cpurange
# noderange    node | firstnode-lastnode               (origin 0)
# cpurange     cpu  | firstcpu-lastcpu                 (origin 0)
#    0:2-5     Node 0, cpus 2 thru 5 
#    1-4:0-15  Nodes 1 thru 4, cpus 0 thru 15
make_map()   #  build OpenMPI rank file for this instance
{
((rank=0))
incr=${OMP_NUM_THREADS:-1}
ntiles=${BATCH_MPI_CPUS:-1}
while [[ -n $1 ]] ; do
  arg="$1"
  [[ "$arg" == *:* ]] || arg="$arg:"                     # no cpu range, add trailing :
  [[ "$arg" == *: ]] && arg="${arg}0-$((nodesize-1))"    # replace missing cpu range by all cpus on a node
  nodes="${arg%:*}"
  cpus="${arg#*:}"
  [[ "$nodes" == *-* ]] || nodes="${nodes}-${nodes}"     # transform node number into node range
  [[ "$cpus" == *-* ]] || cpus="${cpus}-${cpus}"         # transform cpu number into cpu range
  shift
  for n in $(seq $(echo ${nodes}| tr -- '-' " ") ) ; do  # build OpenMPI rank file
   the_host=$(cat ${NodeFileDir}/nodes.master | sed -n "$((n+1))p")
#    the_host=+n$n
   low=${cpus%-*}
   high=${cpus#*-}
   while ((low+incr<=high+1 && rank<ntiles)) ; do
#     ((incr==1)) && echo "rank $rank=+n$n slot=${low}"
#     ((incr>1))  && echo "rank $rank=+n$n slot=${low}-$((low+incr-1))"
     ((incr==1)) && echo "rank $rank=$the_host slot=${low}"
     ((incr>1))  && echo "rank $rank=$the_host slot=${low}-$((low+incr-1))"
     ((low=low+incr))
     ((rank=rank+1))
   done
  done
done
}
#
instanciate() # create one sub-container. arguments will be passed verbatim to make_map
{
  Arg1="${1}"
  RANKFILE_PBS=${NodeFileDir}/${name}-${instance}
  echo "======================================================================================" >>${ListingFile}+${name}-${instance}
  chmod 644 ${ListingFile}+${name}-${instance}
  RESOURCES_PBS="$*"                                                # transmit resources as they are passed to make_map
  make_map $* >${RANKFILE_PBS}                                      # create OpenMPI rank file
  cat ${RANKFILE_PBS} >>${ListingFile}+${name}-${instance}          # write rank file into listing file
  echo "======================================================================================" >>${ListingFile}+${name}-${instance}
  HostTaskset=0-$((nodesize-1))                                     # default taskset for node 0 is all cpus on node
  [[ "${Arg1}" == 0:* ]] && HostTaskset=${Arg1#0:}                  # if a taskset has been specified for node 0, use it
  export HostTaskset
  for p in ${MyProcesses} ; do taskset -cp $HostTaskset $p ; done   # run only on prescribed taskset (node 0 only)
#
# start sub-container with node 0 taskset constraints
#
  ${RunWorkStream} -name ${name}-${instance} -maxidle $maxidle -queues $queues     \
       2>>${ListingFile}+${name}-${instance} 1>>${ListingFile}+${name}-${instance} &
#
  for p in ${MyProcesses} ; do 
    taskset -cp 0-$((nodesize-1)) $p ;            # cancel taskset restrictions
  done
  ((instance=instance+1))                         # bump instance count
}
#------------------------------------------------------------------------------------------------------------------------------
mkdir -p ${HOME}/.job_queues/nodefiledir           # directory containing control flags
export TheJobRunFlag=${HOME}/.job_queues/nodefiledir/${TheJobName}  # run flag base name
rm -f ${TheJobName}*                               # send terminate command to other container(s) with the same name
export TheJobRunFlag=${TheJobRunFlag}$(date +%s)
touch ${TheJobRunFlag}                             # quit if this file disappears
#
export NodeFileDir="${HOME}/.job_queues/nodefiledir/$(hostname)$(date +%s)"
export InstanceQuitFile=${NodeFileDir}/InstanceQuitFile      # quit signal from first sub-container that terminates
mkdir ${NodeFileDir} || exit 1
touch ${InstanceQuitFile} || exit 1
export TODO_UPON_EXIT='rm -rf ${NodeFileDir} ; kill -9 $$'
#
echo $(hostname) >${NodeFileDir}/nodes.master
cat ${PBS_NODEFILE} | grep -v "^$(hostname)" | uniq >>${NodeFileDir}/nodes.master
LocalHost="$(hostname)"
#
export instance=0
export NODEFILE_PBS=${NodeFileDir}/nodes.master
export FORCE_SETUP=yes
export name=""
export queues=""
EOJ
cat ${ContainerJob}.user >>${ContainerJob}
rm -f ${ContainerJob}.user
cat <<\EOJ >>${ContainerJob}
#------------------------------------------------------------------------------------------------------------------------------
wait   # wait for backgrounded sub-containers to terminate
#------------------------------------------------------------------------------------------------------------------------------
rm -f ${InstanceQuitFile}  # global quit signal file
sleep 10
rm -f ${NodeFileDir}/*     # remove node files
rm -f ${TheJobRunFlag}
rmdir ${NodeFileDir}       # directory should now be empty, remove it
EOJ
[[ -z ${SuBmIt} ]] && cat ${ContainerJob}
echo "ord_soumet ${ContainerJob} -t ${walltime} -mpi -cpus ${cpus}x1 -jn ${jobname} -shell nologin ${QuEuE} $@"
[[ "${SuBmIt}" == YES ]] &&  ord_soumet ${ContainerJob} -t ${walltime} -mpi -cpus ${cpus}x1 -jn ${jobname} -shell nologin ${QuEuE} "$@"
rm -f ${ContainerJob}
